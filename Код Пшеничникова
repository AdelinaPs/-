#Примеры для программы:
# 01902021
# 5633660141278577912
# 111111
#123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778787980818283848586878889909192939494959697989910011201212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500

class NumberManipulator:
    # Конструктор класса, принимающий имя файла в качестве аргумента
    def __init__(self, filename):
        
        try:
            # Попытка открыть файл для чтения
            with open(filename, 'r') as file:
                lines = file.readlines()  # Считываем все строки из файла
                
                # Проверка на наличие более одной строки
                if len(lines) > 1:
                    raise ValueError("В файле может быть только одна строка, исправьте, пожалуйста!")  # Сообщение об ошибке, если в файле более одной строки
                
                # Чтение первой (и единственной) строки из файла и удаление начальных и конечных пробелов
                self.s = lines[0].strip()  # Удаление пробелов
                
                # Проверка на пустоту файла
                if not self.s:
                    raise ValueError("Файл пуст, пожалуйста, заполните его.")
                
                # Проверка, что длина строки не превышает 1000 символов
                if len(self.s) > 1000:
                    raise ValueError("Количество элементов в файле не должно превышать 1000!")

        except FileNotFoundError:
            # Обработка ситуации, когда файл не найден
            print("Файл не найден.")  # Сообщение об ошибке
            exit(1)  # Завершение программы
        
        except ValueError as ve:
            # Обработка других ошибок ввода-вывода
            print(str(ve))  # Вывод конкретной ошибки
            exit(1)  # Завершение программы

        # Определение количества элементов в строке
        self.n = len(self.s)
        # Расчет параметра equation для алгоритма
        self.equation = self.calculate_equation()
        # Переменная для подсчета шагов алгоритма
        self.steps = 0

    # Функция для расчета параметра equation
    def calculate_equation(self):
        return self.n // 3 + ((self.n - self.n // 3) % 2 == 0) + 1 

    # Функция для вращения строки по часовой стрелке
    def rotate(self):
        return self.s[-1] + self.s[:-1]  # Вращение строки по часовой стрелке

    # Функция для проверки условия равенства суммы двух чисел третьему
    def check_condition(self, a, b, c):
        # Проверка, являются ли a, b или c пустыми строками, или начинаются ли они с '0'
        if len(a) == 0 or len(b) == 0 or len(c) == 0 or a[0] == '0' or b[0] == '0' or c[0] == '0':
            return False  # Если условие не выполняется
        
        a, b, c = int(a), int(b), int(c)  # Преобразование строк в числа
        return a + b == c  # Проверка условия равенства

    # Основная функция для выполнения алгоритма
    def run(self):
        result = []  # Список для хранения промежуточных результатов
        
        for _ in range(self.n):
            self.s = self.rotate()  # Вращение строки
            
            for i in range(1, self.equation):
                j = i + (self.n - i) // 2
                self.steps += 1  # Подсчет шагов
                a, b, c = self.s[:i], self.s[i:j], self.s[j:]  # Разделение строки на части
                
                if self.check_condition(a, b, c):  # Проверка условия
                    # Изменяем способ форматирования строки для удаления пробелов
                    result.append(a + '+' + b + '=' + c)  # Формирование результата
        
        return result  # Возвращаем список результатов

# Пример использования класса
filename = 'input.txt'  # Имя файла с входными данными
manipulator = NumberManipulator(filename)
results = manipulator.run()

# Проверяем, есть ли результаты
if results:
    # Запись результатов в файл
    with open('output.txt', 'w') as file:
        for result in results:
            file.write(result + '\n')  # Запись каждого результата в новый ряд
    print("""Программа завершила свою работу! 
Перейдите в файл output.txt, чтобы посмотреть результат!""")  

else:
    # Запись "No" в файл, если решений нет
    with open('output.txt', 'w') as file:
        file.write("No")  # Запись "No"
    print("""Программа завершила свою работу! 
Перейдите в файл output.txt, чтобы посмотреть результат!""")
